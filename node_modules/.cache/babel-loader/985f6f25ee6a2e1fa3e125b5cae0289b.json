{"ast":null,"code":"var _jsxFileName = \"/Users/katana/Desktop/Programming/Hackathons/SEED/frontend/src/components/pages/SeedDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BACKEND_URL } from \"../../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SeedDetailsComponent(props) {\n  _s();\n\n  const [allCrawlers, setAllCrawlers] = useState([]);\n  const [mainSeed, setMainSeed] = useState(null);\n  const [showData, setShowData] = useState(false);\n  const [showSeed, setShowSeed] = useState(false);\n\n  function renderCrawlers() {\n    return allCrawlers.map(crawler => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"crawler.authorID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this));\n  }\n\n  useEffect(() => {\n    console.log(props.location.state); // axios.get(`${BACKEND_URL}get-crawlers-for-seed/${mainSeed._id}`).then(allCrawlers=>{\n    //     if (allCrawlers.success){\n    //         console.log(\"All crawlers arrived!\");\n    //         console.log(allCrawlers);\n    //         setShowData(true);\n    //     }else{\n    //         console.log(\"Could not fetch all crawlers!\");\n    //     }\n    //\n    //\n    // }).catch(err=>{\n    //     console.log(\"Error getting all the crawlers!\");\n    //     console.log(err.message);\n    // })\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(SeedDetailsComponent, \"Kcof+zXkJ4II23QKUVsik5o7UMQ=\");\n\n_c = SeedDetailsComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedDetailsComponent\");","map":{"version":3,"sources":["/Users/katana/Desktop/Programming/Hackathons/SEED/frontend/src/components/pages/SeedDetails.js"],"names":["React","useState","useEffect","axios","BACKEND_URL","SeedDetailsComponent","props","allCrawlers","setAllCrawlers","mainSeed","setMainSeed","showData","setShowData","showSeed","setShowSeed","renderCrawlers","map","crawler","console","log","location","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,iBAA1B;;;AAEA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAAA;;AAChD,QAAM,CAACC,WAAD,EAAaC,cAAb,IAA+BP,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACQ,QAAD,EAAUC,WAAV,IAAyBT,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAM,CAACU,QAAD,EAAUC,WAAV,IAAyBX,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM,CAACY,QAAD,EAAUC,WAAV,IAAyBb,QAAQ,CAAC,KAAD,CAAvC;;AACA,WAASc,cAAT,GAAyB;AACrB,WAAOR,WAAW,CAACS,GAAZ,CAAgBC,OAAO,iBAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAGH;;AAEDf,EAAAA,SAAS,CAAC,MAAI;AACVgB,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACc,QAAN,CAAeC,KAA3B,EADU,CAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAhBQ,EAgBP,EAhBO,CAAT;AAkBA,sBACI,qCADJ;AAKH;;GAlCuBhB,oB;;KAAAA,oB","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport axios from 'axios';\nimport {BACKEND_URL} from \"../../constants\";\n\nexport default function SeedDetailsComponent(props) {\n    const [allCrawlers,setAllCrawlers] = useState([]);\n    const [mainSeed,setMainSeed] = useState(null);\n    const [showData,setShowData] = useState(false);\n    const [showSeed,setShowSeed] = useState(false);\n    function renderCrawlers(){\n        return allCrawlers.map(crawler=>(\n            <h1>crawler.authorID</h1>\n        ))\n    }\n\n    useEffect(()=>{\n        console.log(props.location.state);\n        // axios.get(`${BACKEND_URL}get-crawlers-for-seed/${mainSeed._id}`).then(allCrawlers=>{\n        //     if (allCrawlers.success){\n        //         console.log(\"All crawlers arrived!\");\n        //         console.log(allCrawlers);\n        //         setShowData(true);\n        //     }else{\n        //         console.log(\"Could not fetch all crawlers!\");\n        //     }\n        //\n        //\n        // }).catch(err=>{\n        //     console.log(\"Error getting all the crawlers!\");\n        //     console.log(err.message);\n        // })\n    },[])\n\n    return (\n        <>\n\n        </>\n    );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}