{"ast":null,"code":"var _jsxFileName = \"/Users/katana/Desktop/Programming/Hackathons/SEED/frontend/src/components/pages/SeedDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BACKEND_URL } from \"../../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SeedDetailsComponent(props) {\n  _s();\n\n  const [allCrawlers, setAllCrawlers] = useState([]);\n  const [mainSeed, setMainSeed] = useState(null);\n  const [showAllCrawlers, setShowAllCrawlers] = useState(false);\n\n  function renderCrawlers() {\n    return allCrawlers.map(crawler => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"crawler.authorID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this));\n  }\n\n  useEffect(() => {\n    setMainSeed(props.location.state);\n    axios.get(`${BACKEND_URL}get-crawlers-for-seed/${mainSeed._id}`).then(allCrawlers => {\n      if (allCrawlers.success) {\n        console.log(\"All crawlers arrived!\");\n        console.log(allCrawlers);\n        setShowAllCrawlers(true);\n      } else {\n        console.log(\"Could not fetch all crawlers!\");\n      }\n    }).catch(err => {\n      console.log(\"Error getting all the crawlers!\");\n      console.log(err.message);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: mainSeed.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: mainSeed.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), showAllCrawlers ? renderCrawlers() : null]\n  }, void 0, true);\n}\n\n_s(SeedDetailsComponent, \"02RASobPPqcvDL0njhPYroq8Q3s=\");\n\n_c = SeedDetailsComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeedDetailsComponent\");","map":{"version":3,"sources":["/Users/katana/Desktop/Programming/Hackathons/SEED/frontend/src/components/pages/SeedDetails.js"],"names":["React","useState","useEffect","axios","BACKEND_URL","SeedDetailsComponent","props","allCrawlers","setAllCrawlers","mainSeed","setMainSeed","showAllCrawlers","setShowAllCrawlers","renderCrawlers","map","crawler","location","state","get","_id","then","success","console","log","catch","err","message","title","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,iBAA1B;;;AAEA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAAA;;AAChD,QAAM,CAACC,WAAD,EAAaC,cAAb,IAA+BP,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACQ,QAAD,EAAUC,WAAV,IAAyBT,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAM,CAACU,eAAD,EAAiBC,kBAAjB,IAAuCX,QAAQ,CAAC,KAAD,CAArD;;AACA,WAASY,cAAT,GAAyB;AACrB,WAAON,WAAW,CAACO,GAAZ,CAAgBC,OAAO,iBAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAGH;;AAEDb,EAAAA,SAAS,CAAC,MAAI;AACVQ,IAAAA,WAAW,CAACJ,KAAK,CAACU,QAAN,CAAeC,KAAhB,CAAX;AACAd,IAAAA,KAAK,CAACe,GAAN,CAAW,GAAEd,WAAY,yBAAwBK,QAAQ,CAACU,GAAI,EAA9D,EAAiEC,IAAjE,CAAsEb,WAAW,IAAE;AAC/E,UAAIA,WAAW,CAACc,OAAhB,EAAwB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYhB,WAAZ;AACAK,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,OAJD,MAIK;AACDU,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACH;AAGJ,KAVD,EAUGC,KAVH,CAUSC,GAAG,IAAE;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACC,OAAhB;AACH,KAbD;AAcH,GAhBQ,EAgBP,EAhBO,CAAT;AAkBA,sBACI;AAAA,4BACI;AAAA,gBAAKjB,QAAQ,CAACkB;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAKlB,QAAQ,CAACmB;AAAd;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKjB,eAAe,GAAGE,cAAc,EAAjB,GAAoB,IAHxC;AAAA,kBADJ;AAOH;;GAnCuBR,oB;;KAAAA,oB","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport axios from 'axios';\nimport {BACKEND_URL} from \"../../constants\";\n\nexport default function SeedDetailsComponent(props) {\n    const [allCrawlers,setAllCrawlers] = useState([]);\n    const [mainSeed,setMainSeed] = useState(null);\n    const [showAllCrawlers,setShowAllCrawlers] = useState(false);\n    function renderCrawlers(){\n        return allCrawlers.map(crawler=>(\n            <h1>crawler.authorID</h1>\n        ))\n    }\n\n    useEffect(()=>{\n        setMainSeed(props.location.state)\n        axios.get(`${BACKEND_URL}get-crawlers-for-seed/${mainSeed._id}`).then(allCrawlers=>{\n            if (allCrawlers.success){\n                console.log(\"All crawlers arrived!\");\n                console.log(allCrawlers);\n                setShowAllCrawlers(true);\n            }else{\n                console.log(\"Could not fetch all crawlers!\");\n            }\n\n\n        }).catch(err=>{\n            console.log(\"Error getting all the crawlers!\");\n            console.log(err.message);\n        })\n    },[])\n\n    return (\n        <>\n            <h1>{mainSeed.title}</h1>\n            <h3>{mainSeed.description}</h3>\n            {showAllCrawlers ? renderCrawlers():null}\n        </>\n    );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}